from pathlib import Path
from string import Template
from subprocess import run
import os
import shutil


def gen_job(
    opt_in_file_name,
    woring_dir = Path("."),
    supercell = "2 2 2",
    num_nodes = 4,
    wall_time_string = "6:00:00",
    kpoints = [1, 1, 1],
    kpoints_offsets = [0.5, 0.5, 0.5] 
    ):

    os.chdir(woring_dir)

    run(['phonopy', '--castep', f'--dim={supercell}', '-d', '-c', opt_in_file_name])

    file_list = list(woring_dir.iterdir())

    print(file_list)

    run_path = woring_dir / "run"
    run_path.mkdir(exist_ok=True)

    result_path = woring_dir / "result"
    result_path.mkdir(exist_ok=True)
    pur_list = []
    #### Template dicts edit these if you change template and added new variables
    param_sub_dict = {
    }
    
    cell_sub_dict = {
        "cell": "placeholder",
        "kpoint_mp_grid": ' '.join([str(x) for x in kpoints]),
        "kpoint_mp_offset": ' '.join([str(x) for x in kpoints_offsets])
    }

    slurm_sub_dict = {
        "job_name": "placeholder",
        "num_nodes": num_nodes,
        "wall_timer": wall_time_string,
        "result_dir": "../../result"
    }

    slurm_file_name = "run.slurm"

    submit_sub_dict = {
        "run_dir": "place_holder",
        "slurm_file_name": slurm_file_name
    }
    #######

    slurm_template_dir = Path("run.slurm.template")

    cell_template_dir = Path("cell.template")

    submit_dir = Path("submit.sh")
    with open(submit_dir, "w") as f:
        f.write("#! /bin/bash -l\n")
        
    submit_template_dir = Path("submit.sh.template")

    #this get the number of run
    for file in file_list:
        if file.name.startswith('supercell-'): # don't name anything else with supercell in the working folder
            pur = int(file.name[10:13]) #hoping that no changing the filename structure
            if pur not in pur_list:
                pur_list.append(pur)

    # #for holding the INPUT generated by phonopy which is not that useful
    cell_generated_path = Path("generated_cell_bak")
    cell_generated_path.mkdir(exist_ok=True)

    #doing this for each perturbation
    for pur in pur_list:
        pur_path = run_path / str(pur)
        pur_path.mkdir(exist_ok=True)
        job_name = f"{system_name}_{pur}"
        pur_name = f'{pur:03}'
        # file_INPUT = Path(f'supercell-{pur_name}.d12')
        # file_INPUT.rename(d12_generated_path / f"INPUT_{pur}")

        # Cell
        ## Loading template
        with open(cell_template_dir, "r") as f:
            file_data = f.read()
            cell_template = Template(file_data)
        ## Loading Cell
        file_cell = woring_dir / f'supercell-{pur_name}.cell'

        with open(file_cell, "r") as f:
            gened_cell_data = f.read()

        file_cell.rename(cell_generated_path / f"INPUT_{pur}")

        ## filling in the variables to the dict initialised which is different for each job
        cell_sub_dict["cell"] = gened_cell_data
        
        #write the file to folder
        with open(pur_path / f"{job_name}.cell", "w") as f:
            out = cell_template.substitute(cell_sub_dict)
            f.write(out)

        #param a direct copy only
        file_INPUT = woring_dir / "param.template"
        shutil.copyfile(file_INPUT, pur_path / f"{job_name}.param") 

        # create a slurm job file using the template
        ## load template
        with open(slurm_template_dir, "r") as f:
            file_data = f.read()
            slurm_template = Template(file_data)

        #fill variable
        slurm_sub_dict['job_name'] = job_name

        #write file
        slurm_dir = pur_path / slurm_file_name
        with open(slurm_dir, "w") as f:
            out = slurm_template.substitute(slurm_sub_dict)
            f.write(out)

        #create the submit script for one click submit
        ## load template
        with open(submit_template_dir, "r") as f:
            file_data = f.read()
            submit_template = Template(file_data)

        #fill variable
        submit_sub_dict['run_dir'] = str(pur_path)

        #append the submit file
        with open(submit_dir, "a") as f:
            out = submit_template.substitute(submit_sub_dict)
            f.write(out)

if __name__ == "__main__":
    ##Param
    opt_in_file_name = "urea-out.cell"
    supercell = "2 2 2" 
    num_nodes = 3
    wall_time_string = "6:00:00"
    system_name = "testing"
    kpoints = [2,2,2]
    kpoints_offsets = [0, 0, 0] 
    woring_dir = Path(".")
    ###

    gen_job(
        opt_in_file_name,
        woring_dir = woring_dir,
        supercell = supercell,
        num_nodes = num_nodes,
        wall_time_string = wall_time_string,
        kpoints = kpoints,
        kpoints_offsets = kpoints_offsets    
    )